service: coinboss

custom:
  buy_at: 275
  percentage: 5
  currency: EUR
  coin: ETH
  api_key: ${env:API_KEY}
  api_secret: ${env:API_SECRET}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1

  environment:
    API_KEY: ${self:custom.api_key}
    API_SECRET: ${self:custom.api_secret}
    CURRENCY: ${self:custom.currency}
    # PERCENTAGE: ${self:custom.percentage}
    COIN: ${self:custom.coin}

  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "cloudwatch:PutMetricData"
         - "cloudwatch:GetMetricStatistics"
       Resource: "*"
    - Effect: "Allow"
      Action:
         - "cloudformation:UpdateStack"
      Resource:
        - Ref: 'AWS::StackId'

functions:
  updateBuyPrices:
    handler: handler.updateTransactionPrices
    events:
      - schedule:
          rate: rate(1 minute)
          input:
            coin: ${self:custom.coin}

  buyCoins:
    handler: handler.buyCoins
    environment:
      percentage: ${self:custom.percentage}
    events:
      - sns: buyCoins

  sellCoins:
    handler: handler.sellCoins
    events:
      - sns: sellCoins

  updateThresholds:
    handler: handler.updateThresholds
    events:
      - schedule:
          rate: rate(1 minute)
          input:
            BuyAt: ${file(./threshold.js):min}
            SellAt: ${file(./threshold.js):max}

  calculateExponentialAverage:
    handler: handler.calculateExponentialAverage
    events:
      - schedule:
          rate: rate(1 minute)
          input:
            minutes: 15
            transaction: Buy
      - schedule:
          rate: rate(1 minute)
          input:
            minutes: 15
            transaction: Sell
      - schedule:
          rate: rate(1 minute)
          input:
            minutes: 60
            transaction: Buy
      - schedule:
          rate: rate(1 minute)
          input:
            minutes: 60
            transaction: Sell
    # environment:
    #   StartAt:
    #     Ref: 'StartAt'
    #   Percentage:
    #     Ref: 'Percentage'
    #   Stack:
    #     Ref: 'AWS::StackId'

# you can add CloudFormation resource templates here
resources:
  # Parameters:
  #   Currency:
  #     Type: String
  #     Default: ${self:custom.currency}
  #   Coin:
  #     Type: String
  #     Default: ${self:custom.coin}
  #   Percentage:
  #     Type: Number
  #     Default: ${self:custom.percentage}
  #   ApiKey:
  #     Type: String
  #     Default: ${self:custom.api_key}
  #   ApiSecret:
  #     Type: String
  #     Default: ${self:custom.api_secret}
  #   BuyAt:
  #     Type: Number
  #     Default: ${self:custom.start_at}
  #     Description: Amount at which coins will be bought (auto-updated)
  #   SellAt:
  #     Type: Number
  #     Default: ${self:custom.start_at}
  #     Description: Amount at which coins will be sold (auto-updated)

  Resources:
    SellAlarm:
     Type: AWS::CloudWatch::Alarm
     Properties:
       ActionsEnabled: true
       ComparisonOperator: GreaterThanOrEqualToThreshold
       MetricName: Sell ETH-EUR
       AlarmDescription: Sell ETH when the price goes above this threshold
       Namespace: Coinboss
       Statistic: Average
       Threshold: ${file(./threshold.js):max}
       Unit: Count
       EvaluationPeriods: 1
       Period: 60
       AlarmActions:
         - Ref: 'SNSTopicSellCoins'

    BuyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        ActionsEnabled: true
        ComparisonOperator: LessThanOrEqualToThreshold
        AlarmDescription: Buy ETH when the price goes above this threshold
        MetricName: Buy ETH-EUR
        Namespace: Coinboss
        Statistic: Average
        Threshold: ${file(./threshold.js):min}
        Unit: Count
        EvaluationPeriods: 1
        Period: 60
        AlarmActions:
          - Ref: 'SNSTopicBuyCoins'
